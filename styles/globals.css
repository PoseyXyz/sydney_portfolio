@tailwind base;
@tailwind components;
@tailwind utilities;

html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}
.overlay{
  background-color: rgba(0, 0, 0, 0.35);
}

*{
  border: none;
}

@keyframes scaleIn{
  from{
    transform: scale(1.2);
  }
  to{
    transform: scale(1);
  }
}

.hero-link{
  @apply text-black hover:text-red-500 hover:before:bg-red-500 text-xs items-center gap-2 dark:hover:text-white font-bold relative inline-flex before:absolute before:h-[3px] before:rounded-lg before:w-2/4  before:-bottom-1 before:bg-black dark:before:bg-white before:block hover:before:w-full before:duration-500 lg:text-lg before:delay-75;
  content: "";
}

.card-image img{
  border-radius: 1.5rem;
}
.project-card{
  background: #10101A;
  color: white;
}
.rotor{
  transform: rotate(-90deg) translateX(-90%) translateY(-450%);
}
.language-tag{
  @apply border rounded-lg text-sm bg-white p-2 text-black
}

.btn-flip{
  @apply gap-2 items-center text-xl inline-flex
}

.footer{
  border-top: 1px solid gray;
}
/* 
@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
  body {
    color: white;
    background: black;
  }
} */




/*custom cursor*/
.cursor-wrapper{
  position: absolute;
 
}

.main-cursor, .secondary-cursor {
  z-index: 10000;
  pointer-events: none;
  transform: translate3d(0, 0, 0);
  position: fixed;

}
.main-cursor {
  transition: opacity 1s cubic-bezier(0.77, 0, 0.175, 1);
  animation: fadeIn 1s cubic-bezier(0.77, 0, 0.175, 1) 0s forwards;
  mix-blend-mode: difference;
}
.main-cursor .main-cursor-background {
  width: 15px;
  height: 15px;
  background: red;
  border-radius: 50%;
}
.secondary-cursor {
  width: 30px;
  height: 30px;
}
.secondary-cursor .cursor-background {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  @apply border-2 dark:border-red-500 border-red-500;
  position: relative;
}
.secondary-cursor .cursor-background:after, .secondary-cursor .cursor-background:before {
  content: "";
  width: 3px;
  height: 3px;
  border-radius: 50%;
  background: red;
  display: block;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  animation: fadeOut 0.75s cubic-bezier(0.77, 0, 0.175, 1) 0s forwards;
}
.secondary-cursor .cursor-background:before {
  left: 10px;
}
.secondary-cursor .cursor-background:after {
  right: 10px;
}
.slider-drag .cursor-background {
  animation: scaleUp 1s cubic-bezier(0.77, 0, 0.175, 1) 0s forwards, bgUp 1s cubic-bezier(0.77, 0, 0.175, 1) 0s forwards;
}
.slider-drag .cursor-background:after {
  animation: fadeIn 1s cubic-bezier(0.77, 0, 0.175, 1) 0s forwards, translateRightDot 1s cubic-bezier(0.77, 0, 0.175, 1) 0s forwards;
}
.slider-drag .cursor-background:before {
  animation: fadeIn 1s cubic-bezier(0.77, 0, 0.175, 1) 0s forwards, translateLeftDot 1s cubic-bezier(0.77, 0, 0.175, 1) 0s forwards;
}
.slider-drag .main-cursor {
  animation: fadeOut 0.75s cubic-bezier(0.77, 0, 0.175, 1) 0s forwards;
}
.hamburger .cursor-background {
  animation: fadeOut 1s cubic-bezier(0.77, 0, 0.175, 1) 0s forwards;
}
.hamburger .main-cursor-background {
  animation: scaleUp 1s cubic-bezier(0.77, 0, 0.175, 1) 0s forwards;
}
@keyframes fadeIn {
  0% {
      opacity: 0;
 }
  100% {
      opacity: 1;
 }
}
@keyframes fadeOut {
  0% {
      opacity: 1;
 }
  100% {
      opacity: 0;
 }
}
@keyframes bgUp {
  from {
      background-color: transparent;
 }
  to {
      background-color: black;
 }
}
@keyframes bgDown {
  from {
      background-color: black;
 }
  to {
      background-color: transparent;
 }
}
@keyframes scaleUp {
  from {
      transform: scale(1);
 }
  to {
      transform: scale(1.5);
 }
}
@keyframes scaleDown {
  from {
      transform: scale(1.5);
 }
  to {
      transform: scale(1);
 }
}
@keyframes translateLeftDot {
  from {
      transform: translate(20px, -50%);
 }
  to {
      transform: translate(0px, -50%);
 }
}
@keyframes translateRightDot {
  from {
      transform: translate(-20px, -50%);
 }
  to {
      transform: translate(0px, -50%);
 }
}